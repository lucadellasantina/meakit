function [ state_trans ] = util_calc_state_transition_rate( clu_sub )
%UTIL_CALC_STATE_TRANSITION_PERCENT Calculate the transition rate of each
%network state.
%   Input:
%           clu_sub:            The clustering results, generated by
%                               util_extract_cluster. Through this, each
%                               bin is assigned to a clustered state.
%   Output:
%           state_trans:        A structure array contains the result, which is
%                               formatted as following: (3 clusters)
%                               state_trans.c1.c1: from c1 to c1 (itself)
%                               state_trans.c1.c2: from c1 to c2...
%
%                               However, the results will also be displayed
%                               in the screen.
%
%   Created on Jul/27/2010 By Pu Jiangbo
%   Britton Chance Center for Biomedical Photonics
%
%   $Revision:
%       PJB#2010-07-29  Check if the current counting point is not included
%                       in any cluster.

% Convert struct to vector
clu_vec = util_convert_struct_2_vector_cluster(clu_sub);

% Find number of clusters
num_cluster = max(clu_vec);
num_points = length(clu_vec);

% Init
for i = 1:num_cluster
    for j = 1:num_cluster
        state_trans.(['c' num2str(i)]).(['c' num2str(j)]) = 0;
    end
    state_trans.(['c' num2str(i)]).total = 0;
end

% Loop & Count
for i = 1:(num_points-1)
    % Check if the current point is not included in any cluster.
    % It is possible, if we are using fuzzy clustering, and the threshold
    % is not low enough to contain all points
    if clu_vec(i) == 0 || clu_vec(i+1) == 0
        % Just ignore it
        continue;
    end
    state_trans.(['c' num2str(clu_vec(i))]).total = state_trans.(['c' num2str(clu_vec(i))]).total + 1;
    state_trans.(['c' num2str(clu_vec(i))]).(['c' num2str(clu_vec(i+1))]) = state_trans.(['c' num2str(clu_vec(i))]).(['c' num2str(clu_vec(i+1))]) + 1;
end

% Count
for i = 1:num_cluster
    % Display
    disp(['State ' num2str(i) ':'])
    for j = 1:num_cluster
        state_trans.(['c' num2str(i)]).(['c' num2str(j)]) = 100 * state_trans.(['c' num2str(i)]).(['c' num2str(j)]) / state_trans.(['c' num2str(i)]).total;
        % Display
        if i == j
            disp(['        to SELF   : ' num2str(state_trans.(['c' num2str(i)]).(['c' num2str(j)])) ' %' ])
        else
            disp(['        to State ' num2str(j) ': ' num2str(state_trans.(['c' num2str(i)]).(['c' num2str(j)])) ' %' ])
        end
    end
end


end

